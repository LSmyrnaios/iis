<workflow-app xmlns="uri:oozie:workflow:0.2" name="test-main_documenttext">
    <start to="producer"/>
    <action name="producer">
        <java>
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queueName}</value>
                </property>
            </configuration>
            <!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.core.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.core.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{text_orig,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/projectreferencesmerger/main/documenttext/data/texts_orig.json}</arg>
            <arg>-C{text_another,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/projectreferencesmerger/main/documenttext/data/texts_another.json}</arg>
            <arg>-C{id_mapping,
				eu.dnetlib.iis.importer.schemas.DeduplicationMapping,
				eu/dnetlib/iis/projectreferencesmerger/main/documenttext/data/id_mapping.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Otext_orig=${workingDir}/producer/text_orig</arg>
            <arg>-Otext_another=${workingDir}/producer/text_another</arg>
            <arg>-Oid_mapping=${workingDir}/producer/id_mapping</arg>
        </java>
        <ok to="main"/>
        <error to="fail"/>
    </action>
    <action name="main">
        <sub-workflow>
            <app-path>${wf:appPath()}/main</app-path>
            <configuration>
                <property>
                    <name>jobTracker</name>
                    <value>${jobTracker}</value>
                </property>
                <property>
                    <name>nameNode</name>
                    <value>${nameNode}</value>
                </property>
                <property>
                    <name>queueName</name>
                    <value>${queueName}</value>
                </property>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/main/working_dir</value>
                </property>
                <!-- Input ports & parameters. -->
                <property>
                    <name>origin_1</name>
                    <value>another</value>
                </property>
                <property>
                    <name>input_from_project_reference_extraction</name>
                    <value>${workingDir}/producer/text_another</value>
                </property>
                <property>
                    <name>origin_2</name>
                    <value>orig</value>
                </property>
                <property>
                    <name>input_2</name>
                    <value>${workingDir}/producer/text_orig</value>
                </property>
                <property>
                    <name>id_field_to_replace1</name>
                    <value>id</value>
                </property>
                <property>
                    <name>key_id_field</name>
                    <value>id</value>
                </property>
                <property>
                    <name>schema_input</name>
                    <value>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</value>
                </property>
                <property>
                    <name>output</name>
                    <value>${workingDir}/main/output</value>
                </property>
                <property>
                    <name>schema_input_envelope</name>
                    <value>eu.dnetlib.iis.projectreferencesmerger.schemas.DocumentTextEnvelope</value>
                </property>
                <property>
                    <name>input_id_mapping</name>
                    <value>${workingDir}/producer/id_mapping</value>
                </property>
                <property>
                    <name>between_origin_collapser</name>
                    <value>eu.dnetlib.iis.projectreferencesmerger.DocumentTextBetweenCollapser</value>
        		</property>
                <property>
            		<name>within_origin_collapser</name>
                    <value>eu.dnetlib.iis.projectreferencesmerger.DocumentTextWithinCollapser</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>
    <action name="consumer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/consumer" />
				<mkdir path="${nameNode}${workingDir}/consumer" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.core.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.core.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{output,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/projectreferencesmerger/main/documenttext/data/output.json}</arg>
    		<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Ioutput=${workingDir}/main/output</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
    <kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
